// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using FoodJournal.ViewModels;
using SWTableViewCells;
using CoreGraphics;
using System.Drawing;

namespace FoodDiary2.iOS.Controller
{
	public partial class FDSettingsVC : UIViewController
	{

//		private SettingsVM vm = new SettingsVM();
//		public GoalsVM gvm = new GoalsVM();
		GoalsVM _gvm;
		SettingsVM _vm;

		private UIPickerView showTotalPicker;

		public FDSettingsVC (IntPtr handle) : base (handle)
		{
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();


//			FoodJournal.SettingsVM vm = new SettingsVM();

//			FDSettingsDataSource ds = new FDSettingsDataSource ();
//
//			tableview1.Source = ds;
//			tableview2.Source = ds;
//			tableviewMeals.Source = ds;
//			tableviewReminders.Source = ds;
//			tableview1.ReloadData ();
//			tableview2.ReloadData ();
//			tableviewMeals.ReloadData ();
//			tableviewReminders.ReloadData ();
			_gvm = new GoalsVM();
			_vm = new SettingsVM();
			var binding = DataContext<SettingsVM>.FromView(View);
			binding.VM = _vm;

			SettingsCellDelegate celldelegate = new SettingsCellDelegate ( DeleteAction , tableView);

			FDSettingsDataSource fdDS = new FDSettingsDataSource (_gvm, _vm, celldelegate);
			fdDS._addNutritionDelegate += AddNutrition;
			fdDS._addMealDelegate += AddMeal;
			fdDS._showTotalDelegate += ShowTotalNutrition;
			fdDS._addReminderDelegate += AddReminder;
			tableView.Source = fdDS;


			UIToolbar toolbar = new UIToolbar (new CGRect((nfloat)0.0f, (nfloat)0.0f, (nfloat)this.View.Frame.Size.Width, (nfloat)44.0f));

			toolbar.TintColor = UIColor.White;
			toolbar.BarStyle = UIBarStyle.Black;

			toolbar.Translucent = true;


			toolbar.Items = new UIBarButtonItem[]{
				
				new UIBarButtonItem("Cancel",
					UIBarButtonItemStyle.Plain,delegate {
						showTotalPicker.Hidden = true;	
						showTotalPicker.SetNeedsDisplay();
					}),
				new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
				new UIBarButtonItem(UIBarButtonSystemItem.Done, delegate {
					showTotalPicker.Hidden = true;
					showTotalPicker.ResignFirstResponder();
					showTotalPicker.SetNeedsDisplay();
				})
			};


			showTotalPicker = new UIPickerView (new CoreGraphics.CGRect (0, this.View.Frame.Height - 250f, this.View.Frame.Width, 250f)
			){
				AutoresizingMask = UIViewAutoresizing.FlexibleWidth,
				ShowSelectionIndicator = true,
				Model = new ShowTotalModel (_vm.TotalOptions),
				BackgroundColor = UIColor.White,
				Hidden = true
			};
			showTotalPicker.AddSubview (toolbar);
//			showTotalPicker.InputAccessoryView = toolbar; 
			// Now update it:
//			showTotalPicker.Frame = PickerFrameWithSize (showTotalPicker.SizeThatFits (CGSize.Empty));
			View.AddSubview (showTotalPicker);

		}

		CGRect PickerFrameWithSize (CGSize size)
		{
			var screenRect = UIScreen.MainScreen.ApplicationFrame;
			return new CGRect (0f, screenRect.Height - 84f - size.Height, size.Width, size.Height);
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			//_vm.MealsExpanded = false;
			tableView.ReloadData ();
		}


		void AddNutrition(){
//			var navigationController = new UINavigationController (AppDelegate.Storyboard.InstantiateViewController ("AddNutritionController"));
//			navigationController.NavigationBar.Translucent = false;
//			AppDelegate.SidebarController.ChangeContentView(navigationController);
			PerformSegue("AddNutritionSegue",this);
		}

		void AddMeal(){
			//			var navigationController = new UINavigationController (AppDelegate.Storyboard.InstantiateViewController ("AddNutritionController"));
			//			navigationController.NavigationBar.Translucent = false;
			//			AppDelegate.SidebarController.ChangeContentView(navigationController);
			PerformSegue("AddMealSegue",this);
		}

		void ShowTotalNutrition(){
			if (showTotalPicker != null){
				showTotalPicker.Hidden = true;
			}

			showTotalPicker.Hidden = false;

		}

		void AddReminder(){
//			var modalPicker = new ModalPickerViewController(ModalPickerType.Date, "Select A Date", this)
//			{
//				HeaderBackgroundColor = UIColor.Red,
//				HeaderTextColor = UIColor.White,
//				TransitioningDelegate = new ModalPickerTransitionDelegate(),
//				ModalPresentationStyle = UIModalPresentationStyle.Custom
//			};

		}

		void DeleteAction(NSIndexPath path){
			var cell = tableView.CellAt (path);
			_gvm.DeleteGoal (_gvm.Goals [path.Row]);
			tableView.DeleteRows(new NSIndexPath[]{ path }, UITableViewRowAnimation.Fade );
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals ("AddNutritionSegue")) {
				(segue.DestinationViewController as AddNutritionController)._gvm = _gvm;	
			} else if (segue.Identifier.Equals("AddMealSegue")) {
				_vm.MealsExpanded = true;
				(segue.DestinationViewController as AddMealController).Meals = _vm.Meals;	
			}
		}

		partial void menuBtnTapped (UIBarButtonItem sender)
		{
			AppDelegate.SidebarController.ToggleMenu ();	
		}

		public class SettingsCellDelegate : SWTableViewCellDelegate {
			Action<NSIndexPath> _deleteAction;
			UITableView _tableView;

			public SettingsCellDelegate (Action<NSIndexPath> deleteAction,  UITableView tableView )
			{
				_deleteAction = deleteAction;
				_tableView = tableView; 
			}



			public override void DidTriggerLeftUtilityButton(SWTableViewCell cell, nint index){

			}

			public override void DidTriggerRightUtilityButton(SWTableViewCell cell, nint index){
				NSIndexPath cellIndexPath = _tableView.IndexPathForCell (cell);
				_deleteAction(cellIndexPath);
			}

			public override bool ShouldHideUtilityButtonsOnSwipe (SWTableViewCell cell)
			{
				// allow just one cell's utility button to be open at once
				return true;
			}

			public override bool CanSwipeToState (SWTableViewCell cell, SWCellState state)
			{
				switch (state) {
				case SWCellState.Left:
					// set to false to disable all left utility buttons appearing
					return true;
				case SWCellState.Right:
					// set to false to disable all right utility buttons appearing
					return true;
				}
				return true;
			}
		}
	}
}
